@model WebApplication4.Models.VerifyOTPViewModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IFHE Hyderabad - Verify OTP</title>
    <link href="https://fonts.googleapis.com/css2?family=Arial:wght@400;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: #f5f5f5;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .header {
            width: 100%;
            background: #e0e0e0;
            padding: 30px 0;
            display: flex;
            justify-content: flex-start;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding-left: 50px;
        }

            .header img {
                height: 50px;
                width: auto;
            }

        .login-card {
            background: #fff;
            border-radius: 10px;
            padding: 20px;
            max-width: 550px;
            width: 100%;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-top: 70px;
        }

        .form-header h2 {
            font-size: 1.6rem;
            font-weight: 700;
            color: #000;
            margin-bottom: 10px;
            text-align: center;
        }

        .form-header .subtitle {
            font-size: 0.95rem;
            color: #333;
            margin-bottom: 5px;
            text-align: center;
        }

        .form-header .notice {
            font-size: 0.95rem;
            color: #d32f2f;
            margin-bottom: 20px;
            text-align: center;
        }

        .form-group {
            margin-bottom: 22px;
            width: 100%;
            text-align: center; /* Center input fields */
        }

            .form-group label {
                font-size: 0.9rem;
                color: #333;
                margin-bottom: 5px;
                display: block;
                text-align: center; /* Center labels */
            }

            .form-group input {
                width: 80%;
                padding: 12px 16px;
                font-size: 1rem;
                border: 1px solid #ddd;
                border-radius: 5px;
                background: #f8f8f8;
                color: #333;
                display: block;
                margin: 0 auto; /* Center input horizontally */
            }

                .form-group input:focus {
                    outline: none;
                    border-color: #d32f2f;
                }

        .text-danger, .alert {
            font-size: 0.8rem;
            color: #d32f2f;
            margin-top: 10px;
            display: block;
            text-align: center; /* Center error messages */
        }

        button[type="submit"] {
            width: 30%;
            padding: 12px;
            background: #d32f2f;
            color: #fff;
            font-size: 1.1rem;
            font-weight: 700;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-transform: uppercase;
            margin: 0 auto;
            display: block;
            transition: transform 0.2s ease, background 0.2s ease, box-shadow 0.2s ease;
        }

            button[type="submit"]:hover {
                background: #b71c1c;
                transform: scale(1.05);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

            button[type="submit"]:active {
                background: #8e0000;
                transform: scale(0.95);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

        @@media (max-width: 480px) {
            .login-card {
                padding: 15px;
                width: 95%;
            }

            .form-header h2 {
                font-size: 1.3rem;
            }

            .form-group {
                padding-left: 0; /* Remove padding for mobile */
            }

            .header img {
                height: 40px;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <img src="~/wwwroot/Images/Logo.svg" alt="Welcoming and Inclusive Environment" />
    </header>
    <div class="login-card">
        <div class="form-header">
            <h2>IFHE Hyderabad - Verify OTP</h2>
            <p class="subtitle">Explore Clubs and Unforgettable Experiences</p>
            <p class="notice">Come & Choose your TrIbE with US.</p>
        </div>
        @using (Html.BeginForm("VerifyOTP", "Admin", FormMethod.Post))
        {
            @Html.HiddenFor(m => m.Email)
            <div class="form-group">
                @Html.TextBoxFor(m => m.OTP, new { @class = "form-control", required = "required", placeholder = "Enter the OTP" })
                @Html.ValidationMessageFor(m => m.OTP, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control", required = "required", placeholder = "Enter new password" })
                @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-danger" })
            </div>
            <button type="submit">Reset Password</button>
        }
        @if (ViewBag.Message != null)
        {
            <div class="alert">@ViewBag.Message</div>
        }
    </div>
</body> // GET: Login Page
 // GET: Login Page
 public ActionResult Login()
 {
     // Prevent logged-in users from accessing login page
     if (Session["UserID"] != null)
     {
         var role = Session["UserRole"]?.ToString();
         if (role == "Admin") return RedirectToAction("Index", "Admin");
         if (role == "UniversityAdministrator") return RedirectToAction("Index", "UniversityAdmin");
         if (role == "Mentor") return RedirectToAction("Index", "Mentor");
         if (role == "Club Admin") return RedirectToAction("Index", "ClubAdmin");
     }

     // Prevent browser from caching login page
     Response.Cache.SetCacheability(HttpCacheability.ServerAndNoCache);
     Response.Cache.SetNoStore();
     Response.Cache.SetExpires(DateTime.UtcNow.AddSeconds(-1));
     Response.AppendHeader("Cache-Control", "no-cache, no-store, must-revalidate");
     Response.AppendHeader("Pragma", "no-cache");
     Response.AppendHeader("Expires", "0");


     return View();
 }



 [HttpPost]

 // POST: Handle Login


 public ActionResult Login(LoginViewModel model)
 {
     if (ModelState.IsValid)
     {
         // Check credentials in Logins table
         var user = _db.Logins.FirstOrDefault(u => u.Email == model.Username && u.PasswordHash == model.Password);

         if (user != null)
         {
             // Store user session data
             Session["UserID"] = user.LoginID;
             Session["UserRole"] = user.Role;
             Session["UserEmail"] = user.Email;

             if (user.Role == "Admin")
             {
                 Session["User1Email"] = user.Email;
                 return RedirectToAction("Index", "Admin");
             }
             else if (user.Role == "UniversityAdministrator")
             {
                 // Fetch assigned university
                 var university = _db.UNIVERSITies.FirstOrDefault(u => u.Email == user.Email);

                 if (university != null)
                 {
                     // Store university details in session
                     Session["UniversityID"] = university.UniversityID;
                     Session["UniversityName"] = university.UniversityNAME;
                     Session["UniversityLocation"] = university.Location;

                     // Redirect to University Admin Dashboard
                     return RedirectToAction("Index", "UniversityAdmin");
                 }
                 else
                 {
                     ViewBag.Message = "No university assigned to this administrator.";
                 }
             }
             else if (user.Role == "Mentor")
             {
                 // Store the mentor's university ID in the session
                 Session["UniversityID"] = user.UniversityID;

                 // Optionally, you can store other details like the mentor's ID or role
                 Session["UserID"] = user.LoginID;
                 // This should be in your login controller
                 //Session["MentorID"] = loggedInMentor.MentorID;

                 Session["UserRole"] = user.Role;

                 Session["UserEmail"] = user.Email;


                 return RedirectToAction("Index", "Mentor");

             }
             else if(user.Role== "Club Admin")
             {
                 Session["UserID"] = user.LoginID;
                 return RedirectToAction("Index", "ClubAdmin");
             }
             else
             {
                 ViewBag.Message = "Access Denied! Invalid Role.";
             }
         }
         else
         {
             ViewBag.Message = "Invalid email or password.";
         }
     }
     return View(model);
 }


 // Logout Action
 public ActionResult Logout()
 {
     Session.Clear();
     return RedirectToAction("Login");
 }
</html>