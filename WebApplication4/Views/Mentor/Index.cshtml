@{
    Layout = "~/Views/Shared/_MentorLayout.cshtml";
    ViewBag.Title = "Mentor Dashboard";
    var clubNames = ViewBag.ClubNames as List<string> ?? new List<string> { "No Clubs" };
    var eventCounts = ViewBag.EventCounts as List<int> ?? new List<int> { 0 };
    var pendingEventCounts = ViewBag.PendingEventCounts as List<int> ?? eventCounts.Select(x => x / 2).ToList();
}

<div class="container mt-3">
    <div class="row">
        <!-- Left Column: Mentor Info -->
        <div class="col-lg-4 col-md-12 mb-4">
            <!-- Mentor Info Card -->
            <div class="card shadow-lg border-0 hover-card h-100 mentor-card">
                <div class="card-body text-center">
                    <!-- Avatar -->
                    <div class="avatar-circle mx-auto mb-3">
                        <i class="fas fa-user fa-2x text-white"></i>
                    </div>
                    <h4 class="card-title text-primary mb-2">@ViewBag.MentorFullName</h4>
                    <div class="text-left">
                        <p class="mb-2"><i class="fas fa-envelope me-2 text-primary"></i><strong>Email:</strong> @ViewBag.Mentor.Email</p>
                        <p class="mb-2"><i class="fas fa-university me-2 text-primary"></i><strong>University:</strong> @ViewBag.University.UniversityNAME</p>
                        <p class="mb-2"><i class="fas fa-map-marker-alt me-2 text-primary"></i><strong>Location:</strong> @ViewBag.University.Location</p>
                        <p class="mb-2"><i class="fas fa-building me-2 text-primary"></i><strong>Department:</strong> @ViewBag.Department.DepartmentName</p>
                        <p class="mb-2"><i class="fas fa-users me-2 text-primary"></i><strong>Total Clubs:</strong> @ViewBag.ClubsCount</p>
                        <p class="mb-2"><i class="fas fa-calendar-check me-2 text-primary"></i><strong>Total Events:</strong> @ViewBag.EventsCount</p>
                    </div>
                    <!-- Notifications Button -->
                    <div class="mt-4">
                        <div class="dropdown">
                            <button class="btn btn-primary dropdown-toggle position-relative w-100" type="button" id="notificationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-bell me-2"></i> Notifications
                                @{
                                    var notifications = ViewBag.Notifications as List<WebApplication4.Models.Notification>;
                                    if (notifications != null && notifications.Count > 0)
                                    {
                                        <span class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-pill">@notifications.Count</span>
                                    }
                                }
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end w-100" aria-labelledby="notificationDropdown">
                                @{
                                    if (notifications != null && notifications.Count > 0)
                                    {
                                        foreach (var notification in notifications)
                                        {
                                            <li>
                                                <a class="dropdown-item d-flex justify-content-between align-items-center hover-notification"
                                                   href="@Url.Action("MarkNotificationAsRead", "Mentor", new { notificationId = notification.NotificationID })">
                                                    <span>@notification.Message</span>
                                                    <small class="text-muted">@(notification.StartDate?.ToString("MMM dd, yyyy") ?? "N/A")</small>
                                                </a>
                                            </li>
                                            <li><hr class="dropdown-divider"></li>
                                        }
                                        <li>
                                            <a class="dropdown-item text-center text-danger" href="@Url.Action("ClearAllNotifications", "Mentor")">Clear All Notifications</a>
                                        </li>
                                    }
                                    else
                                    {
                                        <li><span class="dropdown-item text-center">No new notifications</span></li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column: Chart -->
        <div class="col-lg-8 col-md-12 mb-4">
            <div class="card shadow-sm p-4 border-0 h-100 chart-card">
                <h4 class="text-center mb-2">Clubs and Their Events</h4>
                <div class="chart-container">
                    <canvas id="clubEventChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Advanced Color Palette */
        :root {
            --primary-gradient-start: #4a00e0;
            --primary-gradient-end: #8e2de2;
            --secondary-color: #f7f9fc;
            --text-primary: #2d2d2d;
            --text-secondary: #6c757d;
            --accent-color: #ff6f61;
            --shadow-color: rgba(0, 0, 0, 0.15);
        }

        /* Mentor Card Styling */
        .mentor-card {
            background: linear-gradient(145deg, var(--secondary-color), #ffffff);
            border-radius: 16px;
            overflow: hidden;
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .hover-card {
            transition: transform 0.4s ease, box-shadow 0.4s ease;
        }

        .hover-card:hover {
            transform: translateY(-8px) scale(1.03);
            box-shadow: 0 12px 24px var(--shadow-color) !important;
        }

        .avatar-circle {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, var(--primary-gradient-start), var(--primary-gradient-end));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            border: 2px solid #ffffff;
        }

        .card-title {
            font-weight: 700;
            font-size: 1.5rem;
            letter-spacing: 0.8px;
            color: var(--primary-gradient-start);
        }

        .card-body {
            padding: 2.5rem;
            background: linear-gradient(180deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
        }

        .card-body p {
            font-size: 0.95rem;
            color: var(--text-secondary);
            line-height: 1.6;
            transition: color 0.3s ease;
        }

        .card-body p:hover {
            color: var(--text-primary);
        }

        .card-body p strong {
            color: var(--text-primary);
            font-weight: 600;
        }

        /* Notification Dropdown */
        .btn-primary {
            background: linear-gradient(135deg, var(--primary-gradient-start), var(--primary-gradient-end));
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            padding: 0.8rem 1.5rem;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #3a00b8, #751cb8);
            transform: scale(1.05);
        }

        .btn-primary::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.4s ease, height 0.4s ease;
        }

        .btn-primary:hover::after {
            width: 200px;
            height: 200px;
        }

        .dropdown-menu {
            border-radius: 10px;
            box-shadow: 0 6px 16px var(--shadow-color);
            max-height: 320px;
            overflow-y: auto;
            background: #ffffff;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .hover-notification {
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .hover-notification:hover {
            background-color: var(--secondary-color);
            transform: translateX(5px);
        }

        .dropdown-item {
            font-size: 0.95rem;
            padding: 0.8rem 1.2rem;
            color: var(--text-primary);
        }

        .badge.bg-danger {
            background-color: var(--accent-color) !important;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .badge.bg-danger:hover {
            transform: scale(1);
        }

        /* Chart Card Styling */
        .chart-card {
            background: linear-gradient(145deg, #ffffff, var(--secondary-color));
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .chart-card h4 {
            font-weight: 700;
            color: var(--text-primary);
            font-size: 1.6rem;
            letter-spacing: 0.5px;
            position: relative;
        }

        .chart-card h4::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-gradient-start), var(--primary-gradient-end));
            border-radius: 2px;
        }

        .chart-container {
            position: relative;
            width: 100%;
            height: 450px;
            overflow: hidden;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.8);
        }

        #clubEventChart {
            width: 100% !important;
            height: 450px !important;
            display: block !important;
        }

        /* Responsive Adjustments */
        @@media (max-width: 991px) {
            .col-lg-4, .col-lg-8 {
                margin-bottom: 2rem;
            }

            .avatar-circle {
                width: 65px;
                height: 65px;
            }

            .avatar-circle i {
                font-size: 1.8rem;
            }

            .card-body {
                padding: 1.8rem;
            }

            .card-title {
                font-size: 1.3rem;
            }

            .btn-primary {
                font-size: 0.9rem;
                padding: 0.7rem 1.2rem;
            }

            .dropdown-menu {
                max-height: 240px;
            }

            .chart-container, #clubEventChart {
                height: 320px;
            }

            .chart-card h4 {
                font-size: 1.4rem;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Log data for debugging
            const clubLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(clubNames));
            const eventData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(eventCounts));
            console.log('Club Labels:', clubLabels);
            console.log('Event Data:', eventData);

            // Validate data
            let validLabels = clubLabels && Array.isArray(clubLabels) && clubLabels.length > 0 ? clubLabels : ['No Clubs'];
            let validData = eventData && Array.isArray(eventData) && eventData.length > 0 && eventData.every(v => v != null && !isNaN(v) && v >= 0) ? eventData : [0];

            if (validLabels.length !== validData.length) {
                console.warn('Data mismatch: Labels and data lengths differ. Adjusting to minimum length.');
                const minLength = Math.min(validLabels.length, validData.length);
                validLabels = validLabels.slice(0, minLength);
                validData = validData.slice(0, minLength);
            }

            const ctx = document.getElementById('clubEventChart');
            if (!ctx) {
                console.error('Canvas element #clubEventChart not found in DOM.');
                alert('Error: Chart canvas not found. Please check the page structure.');
                return;
            }

            try {
                new Chart(ctx.getContext('2d'), {
                    type: 'bar',
                    data: {
                        labels: validLabels,
                        datasets: [{
                            label: 'All Events',
                            data: validData,
                            backgroundColor: 'rgba(74, 0, 224, 0.6)', /* Matches primary gradient start */
                            borderColor: 'rgba(74, 0, 224, 1)',
                            borderWidth: 1,
                            hoverBackgroundColor: 'rgba(142, 45, 226, 0.8)', /* Matches primary gradient end */
                            hoverBorderColor: 'rgba(142, 45, 226, 1)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 1200,
                            easing: 'easeInOutCubic'
                        },
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top',
                                labels: {
                                    font: {
                                        size: 13,
                                        weight: 'bold'
                                    },
                                    color: '#2d2d2d'
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(74, 0, 224, 0.9)',
                                titleFont: { size: 14, weight: 'bold' },
                                bodyFont: { size: 12 },
                                callbacks: {
                                    label: function(context) {
                                        return `${context.label}: ${context.raw} events`;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Event Count',
                                    font: { size: 14, weight: 'bold' },
                                    color: '#2d2d2d'
                                },
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.05)',
                                    borderColor: '#2d2d2d'
                                },
                                ticks: {
                                    color: '#2d2d2d',
                                    font: { size: 12 }
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Clubs',
                                    font: { size: 14, weight: 'bold' },
                                    color: '#2d2d2d'
                                },
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    color: '#2d2d2d',
                                    font: { size: 12 }
                                }
                            }
                        }
                    }
                });
                console.log('Chart initialized successfully.');
            } catch (error) {
                console.error('Error initializing chart:', error);
                alert('Error rendering chart. Check console for details.');
            }
        });
    </script>
}